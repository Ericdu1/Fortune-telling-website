import React, { useEffect, useState } from 'react';
import styled from '@emotion/styled';
import { Button, Tag, Card, Tabs, Typography, Badge, Row, Col, Divider, Modal, Rate } from 'antd';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ArrowLeftOutlined, 
  ShareAltOutlined, 
  CalendarOutlined, 
  StarOutlined, 
  BookOutlined,
  PlayCircleOutlined,
  HeartOutlined,
  FireOutlined,
  UserOutlined,
  DesktopOutlined,
  BulbOutlined,
  TeamOutlined,
  SyncOutlined,
  GiftOutlined,
  AimOutlined,
  ArrowRightOutlined
} from '@ant-design/icons';
import { formatDate } from '../utils/date';
import { DailyFortune as DailyFortuneType } from '../types/fortune';
import { getDailyFortune, clearDailyFortuneCache } from '../utils/cache';
import AnimeRecommendation from './AnimeRecommendation';
import DailyWallpaperComponent from './DailyWallpaper';
import StreakCounter from './StreakCounter';
import FortuneCardCollection from './FortuneCardCollection';
import FortuneGame from './FortuneGame';

const { Title: AntTitle, Text, Paragraph } = Typography;
const { TabPane } = Tabs;

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 1.5rem;
  color: white;
  
  @media (max-width: 768px) {
    padding: 1rem 0.8rem;
  }
`;

const Title = styled.h2`
  text-align: center;
  margin-bottom: 1.5rem;
  color: white;
  
  @media (max-width: 768px) {
    margin-bottom: 1rem;
  }
`;

const StyledTabs = styled(Tabs)`
  .ant-tabs-nav {
    margin-bottom: 1.5rem;
  
    &::before {
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
  }
  
  .ant-tabs-tab {
    color: rgba(255, 255, 255, 0.7);
    font-size: 1rem;
    padding: 0.5rem 1rem;
    transition: all 0.3s ease;
    
    &:hover {
      color: rgba(255, 255, 255, 0.9);
    }
    
    .ant-tabs-tab-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
  }
  
  .ant-tabs-tab-active {
    .ant-tabs-tab-btn {
      color: #ffd700 !important;
    }
  }
  
  .ant-tabs-ink-bar {
    background: #ffd700;
  }
  
  @media (max-width: 768px) {
    .ant-tabs-tab {
      padding: 0.4rem 0.8rem;
      font-size: 0.9rem;
      margin: 0 0.3rem 0 0;
    }
  }
`;

const FortuneCard = styled(motion.div)`
  background: linear-gradient(135deg, #6941C6, #3730A3);
  color: white;
  border-radius: 16px;
  padding: 20px;
  margin-bottom: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  width: 100%;
  max-width: 500px;
  margin: 0 auto 24px;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
  }
`;

const DateDisplay = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 16px;
  font-size: 14px;
  color: rgba(255, 255, 255, 0.8);
`;

const LuckMeter = styled.div`
  margin: 16px 0;
  text-align: center;
  background: rgba(255, 255, 255, 0.1);
  padding: 12px;
  border-radius: 8px;
`;

const LuckTitle = styled.div`
  font-size: 14px;
  margin-bottom: 8px;
  color: rgba(255, 255, 255, 0.9);
`;

const LuckStars = styled.div`
  font-size: 24px;
  color: gold;
  letter-spacing: 4px;
`;

const Content = styled.div`
  margin: 20px 0;
  font-size: 16px;
  line-height: 1.6;
  text-align: center;
`;

const TagsContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 8px;
  margin-top: 16px;
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: 2rem;
  
  @media (max-width: 480px) {
    flex-wrap: wrap;
    gap: 0.8rem;
  }
`;

const StyledButton = styled(Button)`
  background: linear-gradient(45deg, #6b6bff, #8e8eff);
  border: none;
  color: white;
  height: 40px;
  padding: 0 1.5rem;
  
  @media (max-width: 480px) {
    flex: 1;
    min-width: 30%;
  }
  
  &:hover {
    opacity: 0.9;
    color: white;
  }
`;

const CategoryCard = styled(FortuneCard)`
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  
  @media (max-width: 768px) {
    padding: 1.2rem;
    margin-bottom: 1.2rem;
  }
  
  @media (max-width: 480px) {
    padding: 1rem;
    margin-bottom: 1rem;
  }
`;

const CategoryTitle = styled.h3`
  color: #ffd700;
  font-size: 1.2rem;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
`;

const CategoryContent = styled.div`
  color: #e0e0e0;
  font-size: 1rem;
  line-height: 1.6;
`;

const LevelBadge = styled.span<{ level: 'SSR' | 'SR' | 'R' | 'N' }>`
  background: ${props => {
    switch (props.level) {
      case 'SSR': return 'linear-gradient(45deg, #FFD700, #FFA500)';
      case 'SR': return 'linear-gradient(45deg, #C0C0C0, #A0A0A0)';
      case 'R': return 'linear-gradient(45deg, #CD7F32, #8B4513)';
      case 'N': return 'linear-gradient(45deg, #808080, #696969)';
    }
  }};
  color: white;
  font-size: 0.8rem;
  padding: 2px 8px;
  border-radius: 12px;
  margin-left: 8px;
`;

const CategoryAdvice = styled.div`
  background: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 1rem;
  margin-top: 1rem;
  border-left: 3px solid #ffd700;
`;

const TabContent = styled.div`
  padding: 0.5rem 0;
`;

const ActionsContainer = styled.div`
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin: 2rem 0;
  
  @media (max-width: 480px) {
    flex-wrap: wrap;
    gap: 0.8rem;
  }
`;

const ActionButton = styled(Button)`
  background: linear-gradient(45deg, #6941C6, #3730A3);
  border: none;
  color: white;
  height: 40px;
  padding: 0 1.5rem;
  
  @media (max-width: 480px) {
    flex: 1;
    min-width: 45%;
    padding: 0 1rem;
  }
  
  &:hover {
    opacity: 0.9;
    color: white;
  }
`;

const RecommendGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1rem;
  margin: 1.5rem 0;
  
  @media (max-width: 640px) {
    grid-template-columns: 1fr;
  }
`;

const RecommendItem = styled.div`
  background: rgba(0, 0, 0, 0.2);
  border-radius: 12px;
  padding: 1rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const RecommendTitle = styled.h4`
  color: #ffd700;
  font-size: 1.1rem;
  margin-bottom: 0.8rem;
  border-bottom: 1px solid rgba(255, 215, 0, 0.3);
  padding-bottom: 0.5rem;
`;

const ArtworkContainer = styled.div`
  margin: 2rem 0;
  text-align: center;
`;

const ArtworkImage = styled.img`
  max-width: 100%;
  max-height: 300px;
  object-fit: contain;
  border-radius: 8px;
  margin-bottom: 1rem;
`;

const ArtworkInfo = styled.div`
  color: #e0e0e0;
  font-size: 0.9rem;
  line-height: 1.5;
`;

const CharacterContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 20px 0;
  text-align: center;
`;

const CharacterImageContainer = styled.div`
  width: 200px;
  height: 200px;
  border-radius: 16px;
  overflow: hidden;
  margin-bottom: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  background: rgba(255, 255, 255, 0.1);
  padding: 10px;
`;

const CharacterImage = styled.img`
  width: 100%;
  height: 100%;
  object-fit: contain;
`;

const CharacterName = styled.div`
  font-size: 18px;
  color: rgba(255, 255, 255, 0.9);
  margin-top: 8px;
  font-weight: 500;
`;

const StatusList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 0;
`;

const StatusItem = styled(motion.li)`
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
`;

const StatusIcon = styled.span`
  margin-right: 0.5rem;
`;

const StatusText = styled.span`
  font-size: 1rem;
`;

interface DailyFortuneProps {
  onBack: () => void;
  onShare: (result: DailyFortuneType) => void;
}

const fadeInVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.5 }
  },
  exit: { 
    opacity: 0,
    y: -20,
    transition: { duration: 0.3 }
  }
};

const getFortuneText = (fortune: string) => {
  const fortuneTexts: Record<string, string> = {
    'Â§ßÂêâ': '‰ªäÂ§©ÊòØ‰∏™Ë∂ÖÁ∫ßÂπ∏ËøêÊó•ÔºÅ‚ú® Â•ΩËøêÂ∞±ÂÉèÊò•Â§©ÁöÑÊ®±Ëä±‰∏ÄÊ†∑ÁªΩÊîæÔºåÊâÄÊúâ‰∫ãÊÉÖÈÉΩ‰ºöÈ°∫È£éÈ°∫Ê∞¥„ÄÇËÆ∞ÂæóÊääÊè°Êú∫‰ºöÔºåËØ¥‰∏çÂÆö‰ºöÊúâÊÑèÊÉ≥‰∏çÂà∞ÁöÑÊÉäÂñúÂì¶ÔºÅ',
    'Âêâ': '‰ªäÂ§©ËøêÂäø‰∏çÈîôÂë¢ÔºÅüå∏ ËôΩÁÑ∂ÂèØËÉΩ‰∏ç‰ºöÊúâÂ§ßÊÉäÂñúÔºå‰ΩÜÂ∞èÁ°ÆÂπ∏‰ºö‰∏çÊñ≠Âá∫Áé∞„ÄÇ‰øùÊåÅÁßØÊûÅÁöÑÂøÉÊÄÅÔºåÂ•Ω‰∫ãËá™ÁÑ∂‰ºöÊù•Êï≤Èó®„ÄÇ',
    '‰∏≠Âêâ': '‰ªäÂ§©ËøêÂäøÂπ≥Á®≥ÔºåÂ∞±ÂÉèÂπ≥ÈùôÁöÑÊπñÈù¢‰∏ÄÊ†∑„ÄÇüåä ËôΩÁÑ∂‰∏ç‰ºöÊúâÂ§™Â§ßÊ≥¢ÊæúÔºå‰ΩÜ‰πü‰∏ç‰ºöÊúâ‰ªÄ‰πàÂ§ßÈóÆÈ¢ò„ÄÇ‰øùÊåÅÂπ≥Â∏∏ÂøÉÔºå‰∫´ÂèóÂΩì‰∏ãÂêßÔºÅ',
    'Â∞èÂêâ': '‰ªäÂ§©ËøêÂäø‰∏ÄËà¨Ôºå‰ΩÜÂà´ÊãÖÂøÉÔºÅüå± Â∞±ÂÉèÊò•Â§©ÁöÑÂ´©ËäΩÔºåËôΩÁÑ∂Áé∞Âú®ÁúãËµ∑Êù•‰∏çËµ∑ÁúºÔºå‰ΩÜÊú™Êù•ÂèØÊúü„ÄÇ‰øùÊåÅËÄêÂøÉÔºåÂ•ΩËøêÁªà‰ºöÂà∞Êù•„ÄÇ',
    'Êú´Âêâ': '‰ªäÂ§©ËøêÂäøÊúâÁÇπÂ∞èÊ≥¢Âä®Ôºå‰ΩÜÂà´Â§™Âú®ÊÑèÔºÅüå¶Ô∏è Â∞±ÂÉèÂ§©Ê∞î‰∏ÄÊ†∑ÔºåÈò¥Êô¥‰∏çÂÆöÊòØÊ≠£Â∏∏ÁöÑ„ÄÇ‰øùÊåÅ‰πêËßÇÔºåÊòéÂ§©‰ºöÊõ¥Â•ΩÔºÅ',
    'Âá∂': '‰ªäÂ§©ËøêÂäø‰∏çÂ§™ÁêÜÊÉ≥Ôºå‰ΩÜÂà´ÁÅ∞ÂøÉÔºÅüå™Ô∏è Â∞±ÂÉèÊö¥È£éÈõ®ËøáÂêéÊÄª‰ºöËßÅÂà∞ÂΩ©ËôπÔºåÂõ∞ÈöæÂè™ÊòØÊöÇÊó∂ÁöÑ„ÄÇ‰øùÊåÅÂùöÂº∫Ôºå‰∏ÄÂàáÈÉΩ‰ºöÂ•ΩËµ∑Êù•ÁöÑ„ÄÇ',
    'Â§ßÂá∂': '‰ªäÂ§©ËøêÂäø‰∏çÂ§™Â•ΩÔºå‰ΩÜËØ∑ËÆ∞‰ΩèÔºöüåßÔ∏è Èõ®ËøáÂ§©Êô¥ÔºåÈò≥ÂÖâÊÄªÂú®È£éÈõ®Âêé„ÄÇ‰øùÊåÅÂÜ∑ÈùôÔºåË∞®ÊÖéË°å‰∫ãÔºå‰∏ÄÂàáÈÉΩ‰ºöËøáÂéªÁöÑ„ÄÇ'
  };
  return fortuneTexts[fortune] || '‰ªäÂ§©ËøêÂäøÂπ≥Á®≥Ôºå‰øùÊåÅÂπ≥Â∏∏ÂøÉ„ÄÇ';
};

const getFortuneImage = (fortune: string) => {
  const fortuneImages: Record<string, string> = {
    'Â§ßÂêâ': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141919_p0.png',
    'Âêâ': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141920_p0.png',
    '‰∏≠Âêâ': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141921_p0.png',
    'Â∞èÂêâ': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141922_p0.png',
    'Êú´Âêâ': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141923_p0.png',
    'Âá∂': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141924_p0.png',
    'Â§ßÂá∂': 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141925_p0.png'
  };
  return fortuneImages[fortune] || 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141926_p0.png';
};

const getFortuneColor = (fortune: string) => {
  const fortuneColors: Record<string, string> = {
    'Â§ßÂêâ': '#FF6B6B', // Êõ¥È≤úËâ≥ÁöÑÁ∫¢Ëâ≤
    'Âêâ': '#FFB6C1', // ÊüîÂíåÁöÑÁ≤âËâ≤
    '‰∏≠Âêâ': '#98FB98', // Ê∏ÖÊñ∞ÁöÑÁªøËâ≤
    'Â∞èÂêâ': '#87CEEB', // Â§©Á©∫Ëìù
    'Êú´Âêâ': '#DDA0DD', // Ê∑°Á¥´Ëâ≤
    'Âá∂': '#A9A9A9', // ÁÅ∞Ëâ≤
    'Â§ßÂá∂': '#696969' // Ê∑±ÁÅ∞Ëâ≤
  };
  return fortuneColors[fortune] || '#D3D3D3';
};

const getFortuneEmoji = (fortune: string) => {
  const fortuneEmojis: Record<string, string> = {
    'Â§ßÂêâ': '‚ú®', // ÊòüÊòü
    'Âêâ': 'üå∏', // Ê®±Ëä±
    '‰∏≠Âêâ': 'üåä', // Ê≥¢Êµ™
    'Â∞èÂêâ': 'üå±', // Â´©ËäΩ
    'Êú´Âêâ': 'üå¶Ô∏è', // Â§ö‰∫ë
    'Âá∂': 'üå™Ô∏è', // ÈæôÂç∑È£é
    'Â§ßÂá∂': 'üåßÔ∏è' // ‰∏ãÈõ®
  };
  return fortuneEmojis[fortune] || 'üå§Ô∏è';
};

const getFortuneAdvice = (fortune: string) => {
  const fortuneAdvice: Record<string, string> = {
    'Â§ßÂêâ': '‰ªäÂ§©ÊòØ‰∏™Â•ΩÊó•Â≠êÔºå‰∏çÂ¶®Â∞ùËØï‰∏Ä‰∫õÊñ∞‰∫ãÁâ©ÔºåËØ¥‰∏çÂÆö‰ºöÊúâÊÑèÂ§ñÊî∂Ëé∑ÔºÅ',
    'Âêâ': '‰øùÊåÅÁßØÊûÅ‰πêËßÇÁöÑÂøÉÊÄÅÔºåÂ•ΩËøêËá™ÁÑ∂‰ºöÊù•Êï≤Èó®„ÄÇ',
    '‰∏≠Âêâ': 'Á®≥ÊâéÁ®≥ÊâìÔºå‰∏ÄÊ≠•‰∏Ä‰∏™ËÑöÂç∞ÔºåÊàêÂäüÂ∞±Âú®‰∏çËøúÂ§Ñ„ÄÇ',
    'Â∞èÂêâ': '‰øùÊåÅËÄêÂøÉÔºåÂ•Ω‰∫ãÂ§öÁ£®ÔºåÁªà‰ºöËøéÊù•ËΩ¨Êú∫„ÄÇ',
    'Êú´Âêâ': 'Ë∞®ÊÖéË°å‰∫ãÔºå‰∏âÊÄùËÄåÂêéË°åÔºåÈÅøÂÖçÂÜ≤Âä®ÂÜ≥ÂÆö„ÄÇ',
    'Âá∂': '‰øùÊåÅÂÜ∑ÈùôÔºåÈÅá‰∫ã‰∏çÊÖåÔºåÂõ∞ÈöæÁªà‰ºöËøáÂéª„ÄÇ',
    'Â§ßÂá∂': '‰ªäÂ§©ÂÆúÈùô‰∏çÂÆúÂä®Ôºå‰øùÊåÅ‰ΩéË∞ÉÔºåÁ≠âÂæÖÊó∂Êú∫„ÄÇ'
  };
  return fortuneAdvice[fortune] || '‰øùÊåÅÂπ≥Â∏∏ÂøÉÔºåÈ°∫ÂÖ∂Ëá™ÁÑ∂„ÄÇ';
};

const getFortuneCharacter = (fortune: string) => {
  const fortuneCharacters: Record<string, { name: string, image: string, description: string }> = {
    'Â§ßÂêâ': {
      name: 'ËêÉÈ¶ô',
      image: 'C:/Users/ericd/OneDrive/ÂõæÁâá/ÁΩëÁ´ôÂõæÁâá/ËêÉÈ¶ôÁ•àÁ•∑‰∏≠.gif',
      description: 'ËêÉÈ¶ôÊ≠£Âú®‰∏∫‰Ω†Á•àÁ•∑ÔºåÂ∏¶Êù•Â•ΩËøêÂíåÁ•ùÁ¶èÔºÅ'
    },
    'Âêâ': {
      name: 'ÁÅµÊ¢¶',
      image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141927_p0.png',
      description: 'ÁÅµÊ¢¶Ê≠£Âú®‰∏∫‰Ω†Á•àÁ¶èÔºåÂ∏¶Êù•Âπ≥ÂÆâÂíåÂñú‰πêÔºÅ'
    },
    '‰∏≠Âêâ': {
      name: 'È≠îÁêÜÊ≤ô',
      image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141928_p0.png',
      description: 'È≠îÁêÜÊ≤ôÊ≠£Âú®ÊñΩÂ±ïÈ≠îÊ≥ïÔºå‰∏∫‰Ω†Â∏¶Êù•Â•ΩËøêÔºÅ'
    },
    'Â∞èÂêâ': {
      name: 'Âí≤Â§ú',
      image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141929_p0.png',
      description: 'Âí≤Â§úÊ≠£Âú®‰∏∫‰Ω†ÂáÜÂ§áÂπ∏ËøêÁöÑËå∂ÁÇπÔºÅ'
    },
    'Êú´Âêâ': {
      name: 'Â∏ïÁßãËéâ',
      image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141930_p0.png',
      description: 'Â∏ïÁßãËéâÊ≠£Âú®Á†îÁ©∂Âπ∏ËøêÁöÑÈ≠îÊ≥ïÔºÅ'
    },
    'Âá∂': {
      name: 'ËïæÁ±≥Ëéâ‰∫ö',
      image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141931_p0.png',
      description: 'ËïæÁ±≥Ëéâ‰∫öÊ≠£Âú®‰∏∫‰Ω†È©±Êï£ÂéÑËøêÔºÅ'
    },
    'Â§ßÂá∂': {
      name: 'ËäôÂÖ∞ÊúµÈú≤',
      image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141932_p0.png',
      description: 'ËäôÂÖ∞ÊúµÈú≤Ê≠£Âú®‰∏∫‰Ω†ÊâìÁ†¥ÂéÑËøêÁöÑÊû∑ÈîÅÔºÅ'
    }
  };
  return fortuneCharacters[fortune] || {
    name: 'Á•ûÁßòÂ∞ëÂ•≥',
    image: 'https://i.pixiv.re/img-original/img/2023/12/15/00/00/00/1145141933_p0.png',
    description: 'Á•ûÁßòÂ∞ëÂ•≥Ê≠£Âú®‰∏∫‰Ω†Á•àÁ•∑ÔºÅ'
  };
};

const generateBasicFortuneContent = (categories: DailyFortuneType['categories']) => {
  let content = '‰ªäÊó•ËøêÂäøÔºö\n';

  Object.entries(categories).forEach(([key, category]) => {
    content += `‚Ä¢ ${category.name}Ôºö${category.level}\n`;
  });

  content += '\nÊÄªÁªìÔºö‰ªäÂ§©ÁöÑËøêÂäøÊï¥‰ΩìËæÉ‰∏∫Âπ≥Á®≥ÔºåÈÄÇÂêà‰øùÊåÅÁé∞Áä∂ÔºåË∞®ÊÖéË°å‰∫ã„ÄÇ';

  return content;
};

const generateMysticMessage = (categories: DailyFortuneType['categories']) => {
  const messages = [
    '‰ªäÂ§©ÊòØ‰∏™Â•ΩÊó•Â≠êÔºåÈÄÇÂêàÂ∞ùËØïÊñ∞‰∫ãÁâ©ÔºÅ',
    '‰øùÊåÅÁßØÊûÅ‰πêËßÇÁöÑÂøÉÊÄÅÔºåÂ•ΩËøêËá™ÁÑ∂‰ºöÊù•Êï≤Èó®„ÄÇ',
    'Á®≥ÊâéÁ®≥ÊâìÔºå‰∏ÄÊ≠•‰∏Ä‰∏™ËÑöÂç∞ÔºåÊàêÂäüÂ∞±Âú®‰∏çËøúÂ§Ñ„ÄÇ',
    '‰øùÊåÅËÄêÂøÉÔºåÂ•Ω‰∫ãÂ§öÁ£®ÔºåÁªà‰ºöËøéÊù•ËΩ¨Êú∫„ÄÇ',
    'Ë∞®ÊÖéË°å‰∫ãÔºå‰∏âÊÄùËÄåÂêéË°åÔºåÈÅøÂÖçÂÜ≤Âä®ÂÜ≥ÂÆö„ÄÇ',
    '‰øùÊåÅÂÜ∑ÈùôÔºåÈÅá‰∫ã‰∏çÊÖåÔºåÂõ∞ÈöæÁªà‰ºöËøáÂéª„ÄÇ',
    '‰ªäÂ§©ÂÆúÈùô‰∏çÂÆúÂä®Ôºå‰øùÊåÅ‰ΩéË∞ÉÔºåÁ≠âÂæÖÊó∂Êú∫„ÄÇ'
  ];

  const randomIndex = Math.floor(Math.random() * messages.length);
  return messages[randomIndex];
};

// Ê∑ªÂä†ÂáΩÊï∞Â∞ÜËøêÂäøÁ≠âÁ∫ßËΩ¨Êç¢‰∏∫ÊñáÊú¨ÊòæÁ§∫
const getFortuneLevelText = (level: string): string => {
  switch(level) {
    case 'SSR':
      return 'Â§ßÂêâ';
    case 'SR':
      return 'Âêâ';
    case 'R':
      return 'Â∞èÂá∂';
    case 'N':
      return 'Âá∂';
    default:
      return 'ÊôÆÈÄö';
  }
};

const DiceIcon = SyncOutlined;

// Ê∑ªÂä†LuckyHintÁªÑ‰ª∂
const LuckyHint: React.FC = () => {
  // ÁîüÊàêÈöèÊú∫Âπ∏ËøêËâ≤
  const luckyColors = ['Á∫¢Ëâ≤', 'ËìùËâ≤', 'ÁªøËâ≤', 'ÈªÑËâ≤', 'Á¥´Ëâ≤', 'Á≤âËâ≤', 'Ê©ôËâ≤', 'ÈáëËâ≤', 'Èì∂Ëâ≤', 'ÁôΩËâ≤'];
  const luckyColor = luckyColors[Math.floor(Math.random() * luckyColors.length)];
  
  // ÁîüÊàêÈöèÊú∫Âπ∏ËøêÊï∞Â≠ó
  const luckyNumber = Math.floor(Math.random() * 100) + 1;
  
  // Âπ∏ËøêÂÖ≥ÈîÆËØç
  const luckyKeywords = ['ÂàõÊñ∞', 'ÂùöÊåÅ', 'ÂÜíÈô©', 'Ê≤âÁ®≥', 'ÁÉ≠ÊÉÖ', '‰∏ìÊ≥®', 'ÊîæÊùæ', 'Ê∏©Êöñ', 'Ë∞¶Ëôö', 'ÊûúÊñ≠'];
  const luckyKeyword = luckyKeywords[Math.floor(Math.random() * luckyKeywords.length)];
  
  // ‰ªäÊó•ÂÆúÂøå
  const goodActivities = ['Â≠¶‰π†Êñ∞ÊäÄËÉΩ', 'Êà∑Â§ñÊ¥ªÂä®', 'Á§æ‰∫§ËÅö‰ºö', 'Âàõ‰Ωú', 'ÂÜ•ÊÉ≥', 'ÈòÖËØª', 'ÊóÖË°å', 'Ë¥≠Áâ©', 'ËøêÂä®', 'Â®±‰πê'];
  const badActivities = ['ÁÜ¨Â§ú', 'ÂÜ≤Âä®Ê∂àË¥π', '‰∫âÊâß', 'ÂÅöÈáçÂ§ßÂÜ≥ÂÆö', 'Â§çÊùÇÊìç‰Ωú', 'È´òÈ£éÈô©Ê¥ªÂä®', 'ÊãñÂª∂', 'ËøáÂ∫¶Âä≥Á¥Ø', 'Êö¥È•ÆÊö¥È£ü'];
  
  const goodActivity1 = goodActivities[Math.floor(Math.random() * goodActivities.length)];
  let goodActivity2 = goodActivities[Math.floor(Math.random() * goodActivities.length)];
  while (goodActivity2 === goodActivity1) {
    goodActivity2 = goodActivities[Math.floor(Math.random() * goodActivities.length)];
  }
  
  const badActivity1 = badActivities[Math.floor(Math.random() * badActivities.length)];
  let badActivity2 = badActivities[Math.floor(Math.random() * badActivities.length)];
  while (badActivity2 === badActivity1) {
    badActivity2 = badActivities[Math.floor(Math.random() * badActivities.length)];
  }
  
  // Ë°å‰∏∫ÂºïÂØº
  const behaviors = [
    'ÈÄÇÂ∫¶ÊåëÊàòËá™ÊàëÔºå‰∏çË¶ÅÁªôËá™Â∑±ËøáÂ§ßÂéãÂäõ',
    'Â§ö‰∏éÊúãÂèã‰∫§ÊµÅÔºåÂàÜ‰∫´ÂøÉÊÉÖÂèØ‰ª•ÁºìËß£ÂéãÂäõ',
    'Â∞ùËØïÊñ∞‰∫ãÁâ©ÔºåÂèØËÉΩ‰ºöÊúâÊÑèÂ§ñÊî∂Ëé∑',
    '‰øùÊåÅËÄêÂøÉÔºåÂ•Ω‰∫ãÂ§öÁ£®',
    '‰ªäÂ§©ÊòØÂèçÊÄùÁöÑÂ•ΩÊó∂Êú∫ÔºåÂõûÈ°æËøáÂéªÁöÑÂæóÂ§±',
    '‰øùÊåÅ‰πêËßÇÂøÉÊÄÅÔºåÁßØÊûÅÈù¢ÂØπÊåëÊàò',
    'ÈÄÇÂΩìÊîæÊùæÔºå‰∏çË¶ÅÁªôËá™Â∑±Â§™Â§ßÂéãÂäõ',
    'ÁèçÊÉúÂΩì‰∏ãÔºåÊÑüÊÅ©ÁîüÊ¥ª‰∏≠ÁöÑÁæéÂ•Ω',
    'Áõ∏‰ø°Ëá™Â∑±ÁöÑÁõ¥ËßâÔºåÂ§ßËÉÜÂÜ≥Á≠ñ',
    '‰øùÊåÅË∞¶ËôöÔºåÂêë‰ªñ‰∫∫Â≠¶‰π†'
  ];
  const behavior = behaviors[Math.floor(Math.random() * behaviors.length)];
  
  return (
    <TabContent>
      <CategoryCard
        variants={fadeInVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <CategoryTitle>‰ªäÊó•Âπ∏ËøêÊèêÁ§∫</CategoryTitle>
        <CategoryContent>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
            <div style={{ padding: '10px', borderRadius: '8px', background: 'rgba(0,0,0,0.2)' }}>
              <div style={{ color: '#ffd700', marginBottom: '5px' }}>üé® Âπ∏ËøêËâ≤Ôºö</div>
              <div>{luckyColor}</div>
            </div>
            
            <div style={{ padding: '10px', borderRadius: '8px', background: 'rgba(0,0,0,0.2)' }}>
              <div style={{ color: '#ffd700', marginBottom: '5px' }}>üî¢ Âπ∏ËøêÊï∞Â≠óÔºö</div>
              <div>{luckyNumber}</div>
            </div>
            
            <div style={{ padding: '10px', borderRadius: '8px', background: 'rgba(0,0,0,0.2)' }}>
              <div style={{ color: '#ffd700', marginBottom: '5px' }}>üîë Âπ∏ËøêÂÖ≥ÈîÆËØçÔºö</div>
              <div>{luckyKeyword}</div>
            </div>
            
            <div style={{ padding: '10px', borderRadius: '8px', background: 'rgba(0,0,0,0.2)' }}>
              <div style={{ color: '#ffd700', marginBottom: '5px' }}>‚úÖ ‰ªäÊó•ÂÆúÔºö</div>
              <div>{goodActivity1}„ÄÅ{goodActivity2}</div>
            </div>
            
            <div style={{ padding: '10px', borderRadius: '8px', background: 'rgba(0,0,0,0.2)' }}>
              <div style={{ color: '#ffd700', marginBottom: '5px' }}>‚ùå ‰ªäÊó•ÂøåÔºö</div>
              <div>{badActivity1}„ÄÅ{badActivity2}</div>
            </div>
            
            <CategoryAdvice>
              <strong style={{ color: '#ffd700' }}>Ë°å‰∏∫ÂºïÂØºÔºö</strong> {behavior}
            </CategoryAdvice>
          </div>
        </CategoryContent>
      </CategoryCard>
    </TabContent>
  );
};

const DailyFortune: React.FC<DailyFortuneProps> = ({ onBack, onShare }) => {
  const [fortune, setFortune] = useState<DailyFortuneType>({
    date: formatDate(),
    content: 'Ê≠£Âú®Âä†ËΩΩ‰ªäÊó•ËøêÂäø...',
    luck: 0,
    tags: [],
    categories: {
      game: { name: 'Ê∏∏ÊàèËøêÂäø', level: 'N', description: 'Âä†ËΩΩ‰∏≠...', advice: 'ËØ∑Á®çÂÄô' },
      anime: { name: 'Âä®ÁîªËøêÂäø', level: 'N', description: 'Âä†ËΩΩ‰∏≠...', advice: 'ËØ∑Á®çÂÄô' },
      create: { name: 'Âàõ‰ΩúËøêÂäø', level: 'N', description: 'Âä†ËΩΩ‰∏≠...', advice: 'ËØ∑Á®çÂÄô' },
      social: { name: 'Á§æ‰∫§ËøêÂäø', level: 'N', description: 'Âä†ËΩΩ‰∏≠...', advice: 'ËØ∑Á®çÂÄô' }
    },
    dailyRecommend: {
      anime: undefined,
      game: undefined,
      music: undefined
    },
    events: {
      animeUpdates: [],
      gameEvents: [],
      birthdays: [],
      releases: [],
      list: []
    },
    dailyArtwork: {
      id: '',
      title: 'Âä†ËΩΩ‰∏≠...',
      artistId: '',
      artistName: 'Âä†ËΩΩ‰∏≠...',
      imageUrl: './images/artworks/127455493_p0.png'
    },
    mysticMessage: 'Âä†ËΩΩ‰∏≠...'
  });

  const [loading, setLoading] = useState(true);
  const [activeTabKey, setActiveTabKey] = useState('1');
  const [showCollection, setShowCollection] = useState(false);
  const [showGame, setShowGame] = useState(false);
  const [streakDays, setStreakDays] = useState(0);
  const [lastCheckedDate, setLastCheckedDate] = useState('');
  const [coinsBalance, setCoinsBalance] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = 4;  // Êõ¥Êñ∞‰∏∫4‰∏™Ê†áÁ≠æÈ°µ

  useEffect(() => {
    const fetchFortune = async () => {
      try {
        await clearDailyFortuneCache();
        const dailyFortune = await getDailyFortune();
        
        // ËÆ°ÁÆóÁªºÂêàËøêÂäøÊåáÊï∞
        const levels = Object.values(dailyFortune.categories).map(category => {
          switch (category.level) {
            case 'SSR': return 5;
            case 'SR': return 4;
            case 'R': return 3;
            case 'N': return 2;
            default: return 1;
          }
        });
        const averageLuck = Math.round(levels.reduce((a, b) => a + b, 0) / levels.length);
        
        // Âä®ÊÄÅÁîüÊàêÊÄªÁªìÂíåÁ•ûÁßòÁ≠æÊñá
        const summary = averageLuck >= 4 ? '‰ªäÂ§©ÁöÑËøêÂäøÈùûÂ∏∏Â•ΩÔºåÈÄÇÂêàÂ∞ùËØïÊñ∞‰∫ãÁâ©ÔºÅ' : averageLuck >= 3 ? '‰ªäÂ§©ÁöÑËøêÂäø‰∏çÈîôÔºå‰øùÊåÅÁßØÊûÅÂøÉÊÄÅ„ÄÇ' : '‰ªäÂ§©ËøêÂäø‰∏ÄËà¨ÔºåË∞®ÊÖéË°å‰∫ã„ÄÇ';
        const mysticMessage = generateMysticMessage(dailyFortune.categories);
        
        setFortune({ ...dailyFortune, luck: averageLuck, content: summary, mysticMessage });
        
        saveToHistory(dailyFortune);
      } catch (error) {
        console.error('Ëé∑ÂèñËøêÂäøÂ§±Ë¥•Ôºö', error);
      } finally {
        setLoading(false);
      }
    };

    loadUserData();
    handleCheckin(); // Ëá™Âä®Á≠æÂà∞
    
    fetchFortune();
  }, []);

  const saveToHistory = (fortune: DailyFortuneType) => {
    try {
      const historyString = localStorage.getItem('fortune-history');
      let history: DailyFortuneType[] = [];
      
      if (historyString) {
        history = JSON.parse(historyString);
      }
      
      const existingIndex = history.findIndex(item => item.date === fortune.date);
      
      if (existingIndex === -1) {
        history.push(fortune);
        if (history.length > 30) {
          history = history.slice(history.length - 30);
        }
        localStorage.setItem('fortune-history', JSON.stringify(history));
      }
    } catch (error) {
      console.error('‰øùÂ≠òÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•Ôºö', error);
    }
  };

  const loadUserData = () => {
    try {
      const lastChecked = localStorage.getItem('last-checkin-date') || '';
      setLastCheckedDate(lastChecked);
      
      const streak = parseInt(localStorage.getItem('checkin-streak') || '0');
      setStreakDays(streak);
      
      const coins = parseInt(localStorage.getItem('fortune-coins') || '0');
      setCoinsBalance(coins);
    } catch (error) {
      console.error('Âä†ËΩΩÁî®Êà∑Êï∞ÊçÆÂ§±Ë¥•Ôºö', error);
    }
  };

  const handleCheckin = () => {
    const today = formatDate();
    
    localStorage.setItem('last-checkin-date', today);
    
    if (isConsecutiveDay(lastCheckedDate, today)) {
      const newStreak = streakDays + 1;
      setStreakDays(newStreak);
      localStorage.setItem('checkin-streak', newStreak.toString());
    } else {
      setStreakDays(1);
      localStorage.setItem('checkin-streak', '1');
    }
    
    setLastCheckedDate(today);
    
    const newBalance = coinsBalance + 5;
    setCoinsBalance(newBalance);
    localStorage.setItem('fortune-coins', newBalance.toString());
  };

  const isConsecutiveDay = (lastDate: string, currentDate: string): boolean => {
    if (!lastDate) return false;
    
    const lastDateObj = new Date(lastDate);
    const currentDateObj = new Date(currentDate);
    
    lastDateObj.setHours(0, 0, 0, 0);
    currentDateObj.setHours(0, 0, 0, 0);
    
    const diffTime = currentDateObj.getTime() - lastDateObj.getTime();
    const diffDays = diffTime / (1000 * 60 * 60 * 24);
    
    return diffDays === 1;
  };

  const handleFavorite = () => {
    try {
      const favoritesString = localStorage.getItem('fortune-favorites');
      let favorites: DailyFortuneType[] = [];
      
      if (favoritesString) {
        favorites = JSON.parse(favoritesString);
      }
      
      const existingIndex = favorites.findIndex(item => item.date === fortune.date);
      
      if (existingIndex === -1) {
        favorites.push(fortune);
        localStorage.setItem('fortune-favorites', JSON.stringify(favorites));
      }
      
      setShowCollection(true);
    } catch (error) {
      console.error('Êî∂ËóèËøêÂäøÂ§±Ë¥•Ôºö', error);
    }
  };

  // ‰∏ªË¶ÅËøêÂäøÂÜÖÂÆπÊ†áÁ≠æÈ°µ
  const renderBasicFortune = () => (
    <TabContent>
      <FortuneCard
        variants={fadeInVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <DateDisplay>
          <CalendarOutlined style={{ marginRight: '8px' }} />
          {fortune.date}
        </DateDisplay>
        
        <CharacterContainer>
          <CharacterImageContainer>
            <CharacterImage src="/images/suika-praying.gif" alt="Â∞ëÂ•≥Á•àÁ•∑‰∏≠..." />
          </CharacterImageContainer>
          <CharacterName>Â∞ëÂ•≥Á•àÁ•∑‰∏≠...</CharacterName>
        </CharacterContainer>
        
        <LuckMeter>
          <LuckTitle>‰ªäÊó•ÁªºÂêàËøêÂäø</LuckTitle>
          <LuckStars>
            {'‚òÖ'.repeat(fortune.luck)}{'‚òÜ'.repeat(5 - fortune.luck)}
          </LuckStars>
        </LuckMeter>
        
        <Content>
          <div>üé≤ ÊäΩÂç°ËøêÂäøÔºö{getFortuneLevelText(fortune.categories.game.level)}</div>
          <div>üó£ Á§æ‰∫§ËøêÂäøÔºö{getFortuneLevelText(fortune.categories.social.level)}</div>
          <div>üì¶ Ë¥¢ËøêËøêÂäøÔºö{getFortuneLevelText(fortune.categories.create.level)}</div>
          <div>üéØ Áõ¥ËßâËøêÂäøÔºö{getFortuneLevelText(fortune.categories.anime.level)}</div>
          <div>üåü ‰ªäÊó•ÁªºÂêàËøêÂäøÔºö{'‚òÖ'.repeat(fortune.luck)}{'‚òÜ'.repeat(5 - fortune.luck)}</div>
          <div>üîÆ Á•ûÁßòÁ≠æÊñáÔºö{fortune.mysticMessage}</div>
        </Content>
        
        <TagsContainer>
          {fortune.tags.map((tag, index) => (
            <Tag key={index} color="gold">{tag}</Tag>
          ))}
        </TagsContainer>
      </FortuneCard>
    </TabContent>
  );
  
  // ÊòüÂ∫ßËøêÂäøÊ†áÁ≠æÈ°µ
  const ZodiacFortune: React.FC = () => {
    const [birthday, setBirthday] = useState(localStorage.getItem('user-birthday') || '');
    const [showModal, setShowModal] = useState(!birthday);

    const handleBirthdaySubmit = (date) => {
      localStorage.setItem('user-birthday', date);
      setBirthday(date);
      setShowModal(false);
    };

    const resetBirthday = () => {
      localStorage.removeItem('user-birthday');
      setShowModal(true);
    };

    return (
      <TabContent>
        <Modal visible={showModal} onCancel={() => setShowModal(false)} footer={null}>
          <div style={{ textAlign: 'center' }}>
            <input type="date" onChange={(e) => handleBirthdaySubmit(e.target.value)} />
            <Button onClick={() => setShowModal(false)}>Á°ÆËÆ§</Button>
            <div>Á≥ªÁªüÂ∞ÜËá™Âä®ËÆ∞‰Ωè‰Ω†Ôºå‰∏ãÊ¨°Êó†ÈúÄÂ°´ÂÜô~‚ú®</div>
          </div>
        </Modal>
        {!showModal && (
          <CategoryCard
            variants={fadeInVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            <CategoryTitle>
              ÊòüÂ∫ßËøêÂäø <LevelBadge level={fortune.categories.zodiac?.level}>{fortune.categories.zodiac?.level}</LevelBadge>
            </CategoryTitle>
            <CategoryContent>
              <Paragraph style={{ color: '#e0e0e0' }}>‰ªäÂ§©ÊòØ‰∏™ÈÄÇÂêà‰∏é‰∫∫‰∫§ÊµÅÁöÑÊó•Â≠êÔºåÂèØËÉΩ‰ºöÊúâÊÑèÂ§ñÁöÑÊÉäÂñú„ÄÇ</Paragraph>
              <CategoryAdvice>
                <strong style={{ color: '#ffd700' }}>Âª∫ËÆÆÔºö</strong> ‰øùÊåÅÂºÄÊîæÁöÑÂøÉÊÄÅÔºåËøéÊé•Êñ∞Êú∫‰ºö„ÄÇ
              </CategoryAdvice>
            </CategoryContent>
            <Button onClick={resetBirthday}>ÈáçÊñ∞ËÆæÁΩÆÁîüÊó•</Button>
          </CategoryCard>
        )}
      </TabContent>
    );
  };

  const AnimalFortune: React.FC = () => {
    const [showModal, setShowModal] = useState(true);

    const handleModalClose = () => {
      setShowModal(false);
    };

    return (
      <TabContent>
        <Modal visible={showModal} onCancel={handleModalClose} footer={null}>
          <div style={{ textAlign: 'center' }}>
            <input type="date" onChange={() => handleModalClose()} />
            <Button onClick={handleModalClose}>Á°ÆËÆ§</Button>
            <div>Á≥ªÁªüÂ∞ÜËá™Âä®ËÆ∞‰Ωè‰Ω†Ôºå‰∏ãÊ¨°Êó†ÈúÄÂ°´ÂÜô~‚ú®</div>
          </div>
        </Modal>
        {!showModal && (
          <CategoryCard
            variants={fadeInVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            <CategoryTitle>
              ÁîüËÇñËøêÂäø <LevelBadge level={fortune.categories.animal?.level}>{fortune.categories.animal?.level}</LevelBadge>
            </CategoryTitle>
            <CategoryContent>
              <Paragraph style={{ color: '#e0e0e0' }}>‰ªäÂ§©ÂèØËÉΩ‰ºöÈÅáÂà∞‰∏Ä‰∫õÊåëÊàòÔºå‰ΩÜ‰πüÊúâÊú∫‰ºöÂ±ïÁé∞‰Ω†ÁöÑËÉΩÂäõ„ÄÇ</Paragraph>
              <CategoryAdvice>
                <strong style={{ color: '#ffd700' }}>Âª∫ËÆÆÔºö</strong> ÂãáÊï¢Èù¢ÂØπÔºåÁßØÊûÅÂ∫îÂØπÊåëÊàò„ÄÇ
              </CategoryAdvice>
            </CategoryContent>
          </CategoryCard>
        )}
      </TabContent>
    );
  };

  // Â§ÑÁêÜÈ°µÈù¢ÂØºËà™
  const handlePageChange = (direction: 'prev' | 'next') => {
    // Ê†πÊçÆÂΩìÂâçÊ†áÁ≠æÈ°µËÆ°ÁÆó‰∏ã‰∏Ä‰∏™Ê†áÁ≠æÈ°µ
    const currentTab = parseInt(activeTabKey);
    let newTab: number;
    
    if (direction === 'prev') {
      newTab = currentTab > 1 ? currentTab - 1 : 4;  // Âæ™ÁéØÂà∞ÊúÄÂêé‰∏Ä‰∏™Ê†áÁ≠æÈ°µ
    } else {
      newTab = currentTab < 4 ? currentTab + 1 : 1;  // Âæ™ÁéØÂà∞Á¨¨‰∏Ä‰∏™Ê†áÁ≠æÈ°µ
    }
    
    // ËÆæÁΩÆÊñ∞ÁöÑÊ†áÁ≠æÈ°µ
    setActiveTabKey(newTab.toString());
  };

  if (loading) {
    return (
      <Container>
        <Title>ÊØèÊó•ËøêÂäø</Title>
        <div style={{ textAlign: 'center', color: '#ffd700', marginTop: '2rem' }}>
          Ê≠£Âú®‰∏∫ÊÇ®ÊäΩÂèñ‰ªäÊó•ËøêÂäø...
        </div>
      </Container>
    );
  }

  return (
    <Container>
      <StreakCounter 
        streakDays={streakDays} 
        lastCheckedDate={lastCheckedDate}
        onCheckin={handleCheckin}
      />
      
      <Title>ÊØèÊó•ËøêÂäø</Title>
      
      <StyledTabs 
        defaultActiveKey="1" 
        activeKey={activeTabKey}
        onChange={setActiveTabKey}
        centered
      >
        <TabPane 
          tab={
            <span>
              <CalendarOutlined /> Âü∫Á°ÄËøêÂäø
            </span>
          } 
          key="1"
        >
          <AnimatePresence mode="wait">
            {activeTabKey === '1' && renderBasicFortune()}
          </AnimatePresence>
        </TabPane>
        
        <TabPane 
          tab={
            <span>
              <StarOutlined /> ÊòüÂ∫ß
            </span>
          } 
          key="2"
        >
          <AnimatePresence mode="wait">
            {activeTabKey === '2' && <ZodiacFortune />}
          </AnimatePresence>
        </TabPane>
        
        <TabPane 
          tab={
            <span>
              <UserOutlined /> ÁîüËÇñ
            </span>
          } 
          key="3"
        >
          <AnimatePresence mode="wait">
            {activeTabKey === '3' && <AnimalFortune />}
          </AnimatePresence>
        </TabPane>
        
        <TabPane 
          tab={
            <span>
              <BulbOutlined /> Âπ∏ËøêÊèêÁ§∫
            </span>
          } 
          key="4"
        >
          <AnimatePresence mode="wait">
            {activeTabKey === '4' && <LuckyHint />}
          </AnimatePresence>
        </TabPane>
      </StyledTabs>

      <ButtonContainer>
        <StyledButton onClick={() => handlePageChange('prev')}>
          <ArrowLeftOutlined /> ‰∏ä‰∏ÄÈ°µ
        </StyledButton>
        
        <StyledButton icon={<HeartOutlined />} onClick={handleFavorite}>
          Êî∂ËóèËøêÂäø
        </StyledButton>
        
        <StyledButton icon={<ShareAltOutlined />} onClick={() => onShare(fortune)}>
          ÂàÜ‰∫´ËøêÂäø
        </StyledButton>
        
        <StyledButton onClick={() => handlePageChange('next')}>
          ‰∏ã‰∏ÄÈ°µ <ArrowRightOutlined />
        </StyledButton>
      </ButtonContainer>
      
      <div style={{ textAlign: 'center', marginTop: '1rem' }}>
        <StyledButton onClick={onBack}>
          ËøîÂõû‰∏ªÈ°µ
        </StyledButton>
      </div>

      <FortuneCardCollection 
        visible={showCollection}
        onClose={() => setShowCollection(false)}
      />
      
      <FortuneGame
        visible={showGame}
        onClose={() => setShowGame(false)}
        dailyFortune={fortune}
      />
    </Container>
  );
};

export default DailyFortune; 